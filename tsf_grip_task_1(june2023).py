# -*- coding: utf-8 -*-
"""TSF GRIP task_1(JUNE2023)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PxwVRzu9XqbvvULutx7_uw07sOO6koLD
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np  
import matplotlib.pyplot as plt  
# %matplotlib inline

data = pd.read_csv("/content/raw.githubusercontent.com_AdiPersonalWorks_Random_master_student_scores - student_scores.csv")

data.shape

data.head(25)

data.isnull()

data.info

data.info()

data.describe

data.describe()

data.isnull().sum()

data.corr()

data.cov

import seaborn as sns
sns.heatmap(data.corr(),annot=True,cmap='inferno')

data['Hours'].value_counts()

data['Scores'].value_counts()

data['Scores'].value_counts().sum()

data['Hours'].value_counts().sum()

data['Hours'].value_counts().mean()

data['Scores'].value_counts().mean()

c1 = data['Hours'].value_counts()
c1.plot(kind='pie',figsize=(10,8))
plt.title('Hours')

c1 = data['Scores'].value_counts()
c1.plot(kind='pie',figsize=(10,8))
plt.title('Scores')

R1 = data['Scores'].value_counts()[:150]
R1.plot(kind='bar',figsize=(10,8))
plt.title('Scores')

R1 = data['Hours'].value_counts()
R1.plot(kind='bar',figsize=(10,8))
plt.title('Hours')

data.plot(x='Hours',y='Scores',style='o')
plt.xlabel('Hours Studies')
plt.ylabel('Scores secured')
plt.show()

X = data.iloc[:, :-1].values  
y = data.iloc[:, 1].values

from sklearn.model_selection import train_test_split  
X_train, X_test, y_train, y_test = train_test_split(X, y, 
                            test_size=0.2, random_state=0)

from sklearn.linear_model import LinearRegression  
regressor = LinearRegression()  
regressor.fit(X_train, y_train)

plt.scatter(X,y)
plt.show()

X_train.shape

X_test.shape

y_train.shape

y_test.shape

X_test

pred_val = regressor.predict(X_test)

pred_val

plt.scatter(y_test,pred_val)
plt.show()

from sklearn.metrics import mean_squared_error
np.sqrt( mean_squared_error( y_test, pred_val ) )

from sklearn import metrics  
print('Mean Absolute Error:', 
      metrics.mean_absolute_error(y_test, pred_val))

from sklearn.metrics import r2_score
print( "R-squared: ",r2_score( y_test, pred_val ) )